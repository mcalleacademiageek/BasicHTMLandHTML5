Basic CSS: Override All Other Styles by using Important

Yay! We just proved that inline styles will override all the CSS declarations in your style element.

But wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.

In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use !important

Let's go all the way back to our pink-text class declaration. Remember that our pink-text class was overridden by subsequent class declarations, id declarations, and inline styles.

Let's add the keyword !important to your pink-text element's color declaration to make 100% sure that your h1 element will be pink.

An example of how to do this is:

color: red !important;


CSS básico: anule todos los demás estilos mediante Importante

¡Hurra! Acabamos de demostrar que los estilos en línea anularán todas las declaraciones CSS en su elemento de estilo.

Pero espera. Hay una última forma de anular CSS. Este es el método más poderoso de todos. Pero antes de hacerlo, hablemos sobre por qué querría anular CSS.

En muchas situaciones, utilizará bibliotecas CSS. Estos pueden anular accidentalmente su propio CSS. Entonces, cuando sea absolutamente necesario estar seguro de que un elemento tiene CSS específico, puede usar! Important

Regresemos hasta nuestra declaración de clase de texto rosa. Recuerde que nuestra clase de texto rosa fue anulada por declaraciones de clases posteriores, declaraciones de identificación y estilos en línea.

Agreguemos la palabra clave! Importante a la declaración de color de su elemento de texto rosa para estar 100% seguros de que su elemento h1 será rosado.

Un ejemplo de cómo hacer esto es:

color: red !important;


